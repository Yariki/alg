cmake_minimum_required(VERSION 3.5)
project(algorithms)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(SOURCE_FILES main.cpp Sorting/BaseSort.cpp Sorting/BaseSort.h Sorting/InsertionSort.cpp Sorting/InsertionSort.h Sorting/MergeSort.cpp Sorting/MergeSort.h Sorting/HeapSort.cpp Sorting/HeapSort.h Sorting/QuickSort.cpp Sorting/QuickSort.h DS/BSTree/BSTree.cpp DS/BSTree/BSTree.h DS/BSTree/BSTNode.cpp DS/BSTree/BSTNode.h DS/RBTree/RBNode.cpp DS/RBTree/RBNode.h DS/RBTree/RBTree.cpp DS/RBTree/RBTree.h union/QuickFindUF.cpp union/QuickFindUF.h union/QuickUnionUF.cpp union/QuickUnionUF.h DS/Stack/Stack1.cpp DS/Stack/Stack1.h DS/Stack/Stack2.cpp DS/Stack/Stack2.h DS/Queue/Queue1.cpp DS/Queue/Queue1.h DS/Queue/Queue2.cpp DS/Queue/Queue2.h Sorting/SelectionSort.cpp Sorting/SelectionSort.h Sorting/ShellSort.cpp Sorting/ShellSort.h Sorting/Quick3WaySort.cpp Sorting/Quick3WaySort.h DS/PriorityQueue/PriorityQueue.cpp DS/PriorityQueue/PriorityQueue.h DS/RBTree/LLRBTree.cpp DS/RBTree/LLRBTree.h DS/Hashset/SequantialSearchST.cpp DS/Hashset/SequantialSearchST.h DS/Hashset/SeparateChainingHashSet.cpp DS/Hashset/SeparateChainingHashSet.h DS/Hashset/LinearProbingHashSet.cpp DS/Hashset/LinearProbingHashSet.h DS/Graph/Undirect/UndirectGraph.cpp DS/Graph/Undirect/UndirectGraph.h DS/Graph/Graph.cpp DS/Graph/Graph.h DS/Graph/DepthSearch.cpp DS/Graph/DepthSearch.h DS/Graph/BreadthSearch.cpp DS/Graph/BreadthSearch.h DS/Graph/ConnectedComponent.cpp DS/Graph/ConnectedComponent.h DS/Graph/Direct/Digraph.cpp DS/Graph/Direct/Digraph.h DS/Graph/TopologicalSort.cpp DS/Graph/TopologicalSort.h DS/MST/Edge.cpp DS/MST/Edge.h DS/MST/EdgeWeightedGraph.cpp DS/MST/EdgeWeightedGraph.h DS/MST/KruskalMST.cpp DS/MST/KruskalMST.h DS/PriorityQueue/Pq.cpp DS/PriorityQueue/Pq.h DS/ShortPath/DirectedEdge.cpp DS/ShortPath/DirectedEdge.h DS/ShortPath/EdgeWeightedDigraph.cpp DS/ShortPath/EdgeWeightedDigraph.h DS/ShortPath/DijkstraSP.cpp DS/ShortPath/DijkstraSP.h DS/ShortPath/AcyclicSP.h DS/ShortPath/AcyclicSP.cpp DS/ShortPath/BellmanFordSP.cpp DS/ShortPath/BellmanFordSP.h)
add_executable(algorithms ${SOURCE_FILES})